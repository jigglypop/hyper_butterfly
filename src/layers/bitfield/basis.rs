// src/layers/bitfield/basis.rs

//! # 기저 벡터 테이블 관리
//!
//! 이 모듈은 비트필드 직접 추론 커널에서 사용되는 공유 기저 벡터 테이블 $\{b_j\}$를
//! 생성하고 관리하는 역할을 합니다. 가중치 벡터의 방향은 이 테이블의 인덱스 `idx`로 표현됩니다.

use ndarray::Array2;

/// `B x n` 크기의 기저 벡터 테이블을 생성합니다.
///
/// 실제 시나리오에서는 사전 학습되고 최적화된 테이블을 파일에서 로드해야 합니다.
/// 이 함수는 데모 목적으로, 각 행이 정규화된 n차원 단위 벡터인 테이블을 생성합니다.
///
/// # 인자
/// * `b` - 테이블에 포함된 기저 벡터의 수 (예: 256).
/// * `n` - 각 기저 벡터의 차원.
///
/// # 반환
/// `[b, n]` 형태의 `Array2<f32>`.
pub fn load_basis_table(b: usize, n: usize) -> Array2<f32> {
    let mut basis = Array2::<f32>::zeros((b, n));
    
    // 첫 n개는 표준 기저 벡터 (단위 벡터)
    for i in 0..b.min(n) {
        basis[[i, i]] = 1.0;
    }
    
    // 나머지는 정규화된 벡터로 채움
    if b > n {
        // 간단한 패턴으로 생성 (실제로는 SVD나 학습된 기저를 사용해야 함)
        for i in n..b {
            // 두 개의 차원을 조합하여 새로운 방향 생성
            let idx1 = i % n;
            let idx2 = (i / n) % n;
            if idx1 != idx2 {
                basis[[i, idx1]] = 0.707107;  // 1/sqrt(2)
                basis[[i, idx2]] = 0.707107;
            } else {
                // 하나의 차원만 사용
                basis[[i, idx1]] = 1.0;
            }
        }
    }
    
    basis
} 
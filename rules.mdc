---
alwaysApply: true
---



1. 가독성 우선

복잡한 로직보다 읽기 쉬운 코드를 우선시
의미 있는 변수명과 함수명 사용
주석은 '왜'를 설명하고, 코드는 '무엇'을 표현

2. DRY (Don't Repeat Yourself)

중복 코드 제거
공통 로직은 함수나 모듈로 추출
상수는 한 곳에서 관리

3. KISS (Keep It Simple, Stupid)

과도한 추상화 지양
단순하고 직관적인 해결책 선호
필요 이상으로 복잡하게 만들지 않기

리팩토링 체크리스트
코드 리뷰 전 확인사항

 함수가 단일 책임을 가지고 있는가?
 변수명과 함수명이 의도를 명확히 표현하는가?
 중복 코드가 없는가?
 매직 넘버가 상수로 정의되어 있는가?
 에러 처리가 적절히 되어 있는가?
 테스트 코드가 작성되어 있는가?

성능 관련

 불필요한 반복문이 없는가?
 캐싱을 활용할 수 있는 부분이 있는가?
 비동기 처리가 효율적으로 되어 있는가?

가독성 관련

 코드 중첩이 3단계를 넘지 않는가?
 복잡한 조건문이 함수로 추출되어 있는가?
 주석이 필요한 곳에 적절히 작성되어 있는가?

리팩토링 우선순위

긴급: 버그를 유발할 수 있는 코드
높음: 자주 변경되는 코드
중간: 가독성이 떨어지는 코드
낮음: 성능 개선이 필요한 코드


전 과정에서 준수할 원칙

- 기존 기능 유지: 모든 작업은 기존의 핵심 로직 동작을 해치지 않는 선에서 진행합니다.
- 코드 품질: 불필요한 공백을 피하고, 프로젝트의 스타일 가이드를 준수합니다.
- 관심사 분리: Rust 코어, Python 바인딩, 예제 등 각 레이어의 로직이 섞이지 않도록 구조를 유지합니다.
- 파일 관리: 가능하면 새 파일을 생성하기보다 기존 파일을 리팩토링합니다
- 주석 과도 작성 금지